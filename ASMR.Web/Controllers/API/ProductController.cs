//// asmr: Coffee Beans Management Solution// © 2021 Pandora Karya Digital. All right reserved.//// Written by Danang Galuh Tegar Prasetyo [connect@danang.id]//// ProductController.cs//using System.Threading.Tasks;using ASMR.Core.Constants;using ASMR.Core.Entities;using ASMR.Core.Enumerations;using ASMR.Core.Generic;using ASMR.Core.RequestModel;using ASMR.Core.ResponseModel;using ASMR.Web.Controllers.Attributes;using ASMR.Web.Controllers.Generic;using ASMR.Web.Services;using Microsoft.AspNetCore.Mvc;using Microsoft.Extensions.Logging;namespace ASMR.Web.Controllers.API;public class ProductController : DefaultAbstractApiController<ProductController>{	private readonly IBeanService _beanService;	private readonly IProductService _productService;	public ProductController(		ILogger<ProductController> logger,		IBeanService beanService,		IProductService productService) : base(logger)	{		_beanService = beanService;		_productService = productService;	}	[AllowAccess(Role.Administrator, Role.Roaster, Role.Server)]	[HttpGet]	public IActionResult GetAll([FromQuery] string beanId)	{		var products = !string.IsNullOrEmpty(beanId)			? _productService.GetProductsByBeanId(beanId)			: _productService.GetAllProducts();		return Ok(new ProductsResponseModel(products));	}	[HttpGet("{id}")]	public async Task<IActionResult> GetById(string id)	{		if (string.IsNullOrEmpty(id))		{			var errorModel = new ResponseError(ErrorCodeConstants.RequiredParameterNotProvided,				"Please select a product.");			return BadRequest(new ProductResponseModel(errorModel));		}		var product = await _productService.GetProductById(id, IsAuthenticated());		if (product is null)		{			var errorModel = new ResponseError(ErrorCodeConstants.ResourceNotFound,				"The product you are looking for is not found.");			return BadRequest(new ProductResponseModel(errorModel));		}		return Ok(new ProductResponseModel(product));	}	[AllowAccess(Role.Administrator, Role.Server)]	[ClientPlatform(ClientPlatform.Web)]	[HttpPost]	public async Task<IActionResult> Create([FromBody] CreateProductRequestModel model)	{		var validationActionResult = GetValidationActionResult();		if (validationActionResult is not null)		{			return validationActionResult;		}		var bean = await _beanService.GetBeanById(model.BeanId, IsAuthenticated());		if (bean is null)		{			var errorModel = new ResponseError(ErrorCodeConstants.ResourceNotFound,				"The bean you choose does not exist.");			return BadRequest(new ProductResponseModel(errorModel));		}		if (model.Price < 0)		{			var errorModel = new ResponseError(ErrorCodeConstants.ModelValidationFailed,				"The product price must be equal or more than 0.");			return BadRequest(new ProductResponseModel(errorModel));		}		if (model.WeightPerPackaging <= 0)		{			var errorModel = new ResponseError(ErrorCodeConstants.ModelValidationFailed,				"The product weight per packaging must be more than 0 gram(s).");			return BadRequest(new ProductResponseModel(errorModel));		}		var product = await _productService.CreateProduct(new Product		{			Bean = bean,			CurrentInventoryQuantity = 0,			Price = model.Price,			WeightPerPackaging = model.WeightPerPackaging		});		await _productService.CommitAsync();		return Created(Request.Path, new ProductResponseModel(product)		{			Message = $"Successfully added {product.WeightPerPackaging} gram(s) product for bean '{bean.Name}'."		});	}	[AllowAccess(Role.Administrator, Role.Server)]	[ClientPlatform(ClientPlatform.Web)]	[HttpPatch("{id}")]	public async Task<IActionResult> Modify(string id, [FromBody] UpdateProductRequestModel model)	{		var validationActionResult = GetValidationActionResult();		if (validationActionResult is not null)		{			return validationActionResult;		}		if (string.IsNullOrEmpty(id))		{			var errorModel = new ResponseError(ErrorCodeConstants.RequiredParameterNotProvided,				"Please select a product.");			return BadRequest(new ProductResponseModel(errorModel));		}		if (model.Price < 0)		{			var errorModel = new ResponseError(ErrorCodeConstants.ModelValidationFailed,				"The product price must be equal or more than 0.");			return BadRequest(new ProductResponseModel(errorModel));		}		if (model.WeightPerPackaging <= 0)		{			var errorModel = new ResponseError(ErrorCodeConstants.ModelValidationFailed,				"The product weight per packaging must be more than 0.");			return BadRequest(new ProductResponseModel(errorModel));		}		var product = await _productService.ModifyProduct(id, new Product		{			Price = model.Price,			WeightPerPackaging = model.WeightPerPackaging		});		if (product is null)		{			var errorModel = new ResponseError(ErrorCodeConstants.ResourceNotFound,				"The product you are trying to modify is not found.");			return BadRequest(new ProductResponseModel(errorModel));		}		await _productService.CommitAsync();		return Ok(new ProductResponseModel(product)		{			Message = $"Successfully modified product of bean '{product.Bean.Name}'."		});	}	[AllowAccess(Role.Administrator, Role.Server)]	[ClientPlatform(ClientPlatform.Web)]	[HttpDelete("{id}")]	public async Task<IActionResult> Remove(string id)	{		if (string.IsNullOrEmpty(id))		{			var errorModel = new ResponseError(ErrorCodeConstants.RequiredParameterNotProvided,				"Please select a product.");			return BadRequest(new ProductResponseModel(errorModel));		}		var product = await _productService.RemoveProduct(id);		if (product is null)		{			var errorModel = new ResponseError(ErrorCodeConstants.ResourceNotFound,				"The product you are trying to remove is not found.");			return BadRequest(new ProductResponseModel(errorModel));		}		await _productService.CommitAsync();		return Ok(new ProductResponseModel(product)		{			Message = $"Successfully removed {product.WeightPerPackaging} gram(s) product of " +			          $"bean '{product.Bean.Name}'."		});	}}